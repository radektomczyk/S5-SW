
LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003f8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000034  00800060  000003f8  0000048c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800094  00800094  000004c0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004c0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000004f0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  0000052c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f71  00000000  00000000  000005b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000783  00000000  00000000  00001525  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006fa  00000000  00000000  00001ca8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000104  00000000  00000000  000023a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003af  00000000  00000000  000024a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006df  00000000  00000000  00002857  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  00002f36  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 ef       	ldi	r30, 0xF8	; 248
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 39       	cpi	r26, 0x94	; 148
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a4 e9       	ldi	r26, 0x94	; 148
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a6 39       	cpi	r26, 0x96	; 150
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 bb 01 	call	0x376	; 0x376 <main>
  8a:	0c 94 fa 01 	jmp	0x3f4	; 0x3f4 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <initKeyboard>:
								{'2','5','8','0'},
								{'3','6','9','-'},
								{'A','B','C','D'}};

void initKeyboard(volatile uint8_t *port){
	*port = 0x0F;
  92:	2f e0       	ldi	r18, 0x0F	; 15
  94:	fc 01       	movw	r30, r24
  96:	20 83       	st	Z, r18
  98:	08 95       	ret

0000009a <keyfind>:
		//KEY_DDR = 0xF0;           /* set port direction as input-output */
		//KEY_PRT = 0x0F;

		do
		{
			KEY_PRT &= 0x0F;      /* mask PORT for column read only */
  9a:	8b b3       	in	r24, 0x1b	; 27
  9c:	8f 70       	andi	r24, 0x0F	; 15
  9e:	8b bb       	out	0x1b, r24	; 27
			asm("NOP");
  a0:	00 00       	nop
			colloc = (KEY_PIN & 0x0F); /* read status of column */
  a2:	89 b3       	in	r24, 0x19	; 25
  a4:	8f 70       	andi	r24, 0x0F	; 15
  a6:	80 93 94 00 	sts	0x0094, r24	; 0x800094 <__data_end>
		}while(colloc != 0x0F);
  aa:	8f 30       	cpi	r24, 0x0F	; 15
  ac:	b1 f7       	brne	.-20     	; 0x9a <keyfind>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ae:	87 e8       	ldi	r24, 0x87	; 135
  b0:	93 e1       	ldi	r25, 0x13	; 19
  b2:	01 97       	sbiw	r24, 0x01	; 1
  b4:	f1 f7       	brne	.-4      	; 0xb2 <keyfind+0x18>
  b6:	00 c0       	rjmp	.+0      	; 0xb8 <keyfind+0x1e>
  b8:	00 00       	nop
		do
		{
			do
			{
				_delay_ms(20);             /* 20ms key debounce time */
				colloc = (KEY_PIN & 0x0F); /* read status of column */
  ba:	89 b3       	in	r24, 0x19	; 25
  bc:	8f 70       	andi	r24, 0x0F	; 15
  be:	80 93 94 00 	sts	0x0094, r24	; 0x800094 <__data_end>
				}while(colloc == 0x0F);        /* check for any key press */
  c2:	8f 30       	cpi	r24, 0x0F	; 15
  c4:	a1 f3       	breq	.-24     	; 0xae <keyfind+0x14>
  c6:	8f e0       	ldi	r24, 0x0F	; 15
  c8:	97 e2       	ldi	r25, 0x27	; 39
  ca:	01 97       	sbiw	r24, 0x01	; 1
  cc:	f1 f7       	brne	.-4      	; 0xca <keyfind+0x30>
  ce:	00 c0       	rjmp	.+0      	; 0xd0 <keyfind+0x36>
  d0:	00 00       	nop
				
				_delay_ms (40);	            /* 20 ms key debounce time */
				colloc = (KEY_PIN & 0x0F);
  d2:	89 b3       	in	r24, 0x19	; 25
  d4:	8f 70       	andi	r24, 0x0F	; 15
  d6:	80 93 94 00 	sts	0x0094, r24	; 0x800094 <__data_end>
			}while(colloc == 0x0F);
  da:	8f 30       	cpi	r24, 0x0F	; 15
  dc:	41 f3       	breq	.-48     	; 0xae <keyfind+0x14>

			/* now check for rows */
			KEY_PRT = 0xEF;            /* check for pressed key in 1st row */
  de:	8f ee       	ldi	r24, 0xEF	; 239
  e0:	8b bb       	out	0x1b, r24	; 27
			asm("NOP");
  e2:	00 00       	nop
			colloc = (KEY_PIN & 0x0F);
  e4:	89 b3       	in	r24, 0x19	; 25
  e6:	8f 70       	andi	r24, 0x0F	; 15
  e8:	80 93 94 00 	sts	0x0094, r24	; 0x800094 <__data_end>
			if(colloc != 0x0F)
  ec:	8f 30       	cpi	r24, 0x0F	; 15
  ee:	19 f0       	breq	.+6      	; 0xf6 <keyfind+0x5c>
			{
				rowloc = 0;
  f0:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <rowloc>
				break;
  f4:	27 c0       	rjmp	.+78     	; 0x144 <keyfind+0xaa>
			}

			KEY_PRT = 0xDF;		/* check for pressed key in 2nd row */
  f6:	8f ed       	ldi	r24, 0xDF	; 223
  f8:	8b bb       	out	0x1b, r24	; 27
			asm("NOP");
  fa:	00 00       	nop
			colloc = (KEY_PIN & 0x0F);
  fc:	89 b3       	in	r24, 0x19	; 25
  fe:	8f 70       	andi	r24, 0x0F	; 15
 100:	80 93 94 00 	sts	0x0094, r24	; 0x800094 <__data_end>
			if(colloc != 0x0F)
 104:	8f 30       	cpi	r24, 0x0F	; 15
 106:	21 f0       	breq	.+8      	; 0x110 <keyfind+0x76>
			{
				rowloc = 1;
 108:	81 e0       	ldi	r24, 0x01	; 1
 10a:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <rowloc>
				break;
 10e:	1a c0       	rjmp	.+52     	; 0x144 <keyfind+0xaa>
			}
			
			KEY_PRT = 0xBF;		/* check for pressed key in 3rd row */
 110:	8f eb       	ldi	r24, 0xBF	; 191
 112:	8b bb       	out	0x1b, r24	; 27
			asm("NOP");
 114:	00 00       	nop
			colloc = (KEY_PIN & 0x0F);
 116:	89 b3       	in	r24, 0x19	; 25
 118:	8f 70       	andi	r24, 0x0F	; 15
 11a:	80 93 94 00 	sts	0x0094, r24	; 0x800094 <__data_end>
			if(colloc != 0x0F)
 11e:	8f 30       	cpi	r24, 0x0F	; 15
 120:	21 f0       	breq	.+8      	; 0x12a <keyfind+0x90>
			{
				rowloc = 2;
 122:	82 e0       	ldi	r24, 0x02	; 2
 124:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <rowloc>
				break;
 128:	0d c0       	rjmp	.+26     	; 0x144 <keyfind+0xaa>
			}

			KEY_PRT = 0x7F;		/* check for pressed key in 4th row */
 12a:	8f e7       	ldi	r24, 0x7F	; 127
 12c:	8b bb       	out	0x1b, r24	; 27
			asm("NOP");
 12e:	00 00       	nop
			colloc = (KEY_PIN & 0x0F);
 130:	89 b3       	in	r24, 0x19	; 25
 132:	8f 70       	andi	r24, 0x0F	; 15
 134:	80 93 94 00 	sts	0x0094, r24	; 0x800094 <__data_end>
			if(colloc != 0x0F)
 138:	8f 30       	cpi	r24, 0x0F	; 15
 13a:	09 f4       	brne	.+2      	; 0x13e <keyfind+0xa4>
 13c:	ae cf       	rjmp	.-164    	; 0x9a <keyfind>
			{
				rowloc = 3;
 13e:	83 e0       	ldi	r24, 0x03	; 3
 140:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <rowloc>
				break;
			}
		}

		if(colloc == 0x0E)
 144:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <__data_end>
 148:	8e 30       	cpi	r24, 0x0E	; 14
 14a:	59 f4       	brne	.+22     	; 0x162 <keyfind+0xc8>
		return(keypad[rowloc][0]);
 14c:	e0 91 95 00 	lds	r30, 0x0095	; 0x800095 <rowloc>
 150:	f0 e0       	ldi	r31, 0x00	; 0
 152:	ee 0f       	add	r30, r30
 154:	ff 1f       	adc	r31, r31
 156:	ee 0f       	add	r30, r30
 158:	ff 1f       	adc	r31, r31
 15a:	e0 5a       	subi	r30, 0xA0	; 160
 15c:	ff 4f       	sbci	r31, 0xFF	; 255
 15e:	80 81       	ld	r24, Z
 160:	08 95       	ret
		else if(colloc == 0x0D)
 162:	8d 30       	cpi	r24, 0x0D	; 13
 164:	59 f4       	brne	.+22     	; 0x17c <keyfind+0xe2>
		return(keypad[rowloc][1]);
 166:	e0 91 95 00 	lds	r30, 0x0095	; 0x800095 <rowloc>
 16a:	f0 e0       	ldi	r31, 0x00	; 0
 16c:	ee 0f       	add	r30, r30
 16e:	ff 1f       	adc	r31, r31
 170:	ee 0f       	add	r30, r30
 172:	ff 1f       	adc	r31, r31
 174:	e0 5a       	subi	r30, 0xA0	; 160
 176:	ff 4f       	sbci	r31, 0xFF	; 255
 178:	81 81       	ldd	r24, Z+1	; 0x01
 17a:	08 95       	ret
		else if(colloc == 0x0B)
 17c:	8b 30       	cpi	r24, 0x0B	; 11
 17e:	59 f4       	brne	.+22     	; 0x196 <keyfind+0xfc>
		return(keypad[rowloc][2]);
 180:	e0 91 95 00 	lds	r30, 0x0095	; 0x800095 <rowloc>
 184:	f0 e0       	ldi	r31, 0x00	; 0
 186:	ee 0f       	add	r30, r30
 188:	ff 1f       	adc	r31, r31
 18a:	ee 0f       	add	r30, r30
 18c:	ff 1f       	adc	r31, r31
 18e:	e0 5a       	subi	r30, 0xA0	; 160
 190:	ff 4f       	sbci	r31, 0xFF	; 255
 192:	82 81       	ldd	r24, Z+2	; 0x02
 194:	08 95       	ret
		else
		return(keypad[rowloc][3]);
 196:	e0 91 95 00 	lds	r30, 0x0095	; 0x800095 <rowloc>
 19a:	f0 e0       	ldi	r31, 0x00	; 0
 19c:	ee 0f       	add	r30, r30
 19e:	ff 1f       	adc	r31, r31
 1a0:	ee 0f       	add	r30, r30
 1a2:	ff 1f       	adc	r31, r31
 1a4:	e0 5a       	subi	r30, 0xA0	; 160
 1a6:	ff 4f       	sbci	r31, 0xFF	; 255
 1a8:	83 81       	ldd	r24, Z+3	; 0x03
	}
 1aa:	08 95       	ret

000001ac <LCD_Command>:
	void LCD_Command( unsigned char cmnd )
	{
		LCD_Port = (LCD_Port & 0x0F) | (cmnd & 0xF0);/* Sending upper nibble */
 1ac:	95 b3       	in	r25, 0x15	; 21
 1ae:	9f 70       	andi	r25, 0x0F	; 15
 1b0:	28 2f       	mov	r18, r24
 1b2:	20 7f       	andi	r18, 0xF0	; 240
 1b4:	92 2b       	or	r25, r18
 1b6:	95 bb       	out	0x15, r25	; 21
		LCD_Port &= ~ (1<<RS);		/* RS=0, command reg. */
 1b8:	95 b3       	in	r25, 0x15	; 21
 1ba:	9d 7f       	andi	r25, 0xFD	; 253
 1bc:	95 bb       	out	0x15, r25	; 21
		LCD_Port |= (1<<EN);		/* Enable pulse */
 1be:	95 b3       	in	r25, 0x15	; 21
 1c0:	91 60       	ori	r25, 0x01	; 1
 1c2:	95 bb       	out	0x15, r25	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1c4:	00 00       	nop
		_delay_us(1);
		LCD_Port &= ~ (1<<EN);
 1c6:	95 b3       	in	r25, 0x15	; 21
 1c8:	9e 7f       	andi	r25, 0xFE	; 254
 1ca:	95 bb       	out	0x15, r25	; 21
 1cc:	32 e4       	ldi	r19, 0x42	; 66
 1ce:	3a 95       	dec	r19
 1d0:	f1 f7       	brne	.-4      	; 0x1ce <LCD_Command+0x22>
 1d2:	00 c0       	rjmp	.+0      	; 0x1d4 <LCD_Command+0x28>
		_delay_us(200);
		LCD_Port = (LCD_Port & 0x0F) | (cmnd << 4);/* Sending lower nibble */
 1d4:	25 b3       	in	r18, 0x15	; 21
 1d6:	30 e1       	ldi	r19, 0x10	; 16
 1d8:	83 9f       	mul	r24, r19
 1da:	c0 01       	movw	r24, r0
 1dc:	11 24       	eor	r1, r1
 1de:	92 2f       	mov	r25, r18
 1e0:	9f 70       	andi	r25, 0x0F	; 15
 1e2:	89 2b       	or	r24, r25
 1e4:	85 bb       	out	0x15, r24	; 21
		LCD_Port |= (1<<EN);
 1e6:	85 b3       	in	r24, 0x15	; 21
 1e8:	81 60       	ori	r24, 0x01	; 1
 1ea:	85 bb       	out	0x15, r24	; 21
 1ec:	00 00       	nop
		_delay_us(1);
		LCD_Port &= ~ (1<<EN);
 1ee:	85 b3       	in	r24, 0x15	; 21
 1f0:	8e 7f       	andi	r24, 0xFE	; 254
 1f2:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1f4:	83 ef       	ldi	r24, 0xF3	; 243
 1f6:	91 e0       	ldi	r25, 0x01	; 1
 1f8:	01 97       	sbiw	r24, 0x01	; 1
 1fa:	f1 f7       	brne	.-4      	; 0x1f8 <LCD_Command+0x4c>
 1fc:	00 c0       	rjmp	.+0      	; 0x1fe <LCD_Command+0x52>
 1fe:	00 00       	nop
 200:	08 95       	ret

00000202 <LCD_Char>:

	}

	void LCD_Char( unsigned char data )
	{
		LCD_Port = (LCD_Port & 0x0F) | (data & 0xF0); /* sending upper nibble */
 202:	95 b3       	in	r25, 0x15	; 21
 204:	9f 70       	andi	r25, 0x0F	; 15
 206:	28 2f       	mov	r18, r24
 208:	20 7f       	andi	r18, 0xF0	; 240
 20a:	92 2b       	or	r25, r18
 20c:	95 bb       	out	0x15, r25	; 21
		LCD_Port |= (1<<RS);		/* RS=1, data reg. */
 20e:	95 b3       	in	r25, 0x15	; 21
 210:	92 60       	ori	r25, 0x02	; 2
 212:	95 bb       	out	0x15, r25	; 21
		LCD_Port|= (1<<EN);
 214:	95 b3       	in	r25, 0x15	; 21
 216:	91 60       	ori	r25, 0x01	; 1
 218:	95 bb       	out	0x15, r25	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 21a:	00 00       	nop
		_delay_us(1);
		LCD_Port &= ~ (1<<EN);
 21c:	95 b3       	in	r25, 0x15	; 21
 21e:	9e 7f       	andi	r25, 0xFE	; 254
 220:	95 bb       	out	0x15, r25	; 21
 222:	32 e4       	ldi	r19, 0x42	; 66
 224:	3a 95       	dec	r19
 226:	f1 f7       	brne	.-4      	; 0x224 <LCD_Char+0x22>
 228:	00 c0       	rjmp	.+0      	; 0x22a <LCD_Char+0x28>

		_delay_us(200);

		LCD_Port = (LCD_Port & 0x0F) | (data << 4); /* sending lower nibble */
 22a:	25 b3       	in	r18, 0x15	; 21
 22c:	30 e1       	ldi	r19, 0x10	; 16
 22e:	83 9f       	mul	r24, r19
 230:	c0 01       	movw	r24, r0
 232:	11 24       	eor	r1, r1
 234:	92 2f       	mov	r25, r18
 236:	9f 70       	andi	r25, 0x0F	; 15
 238:	89 2b       	or	r24, r25
 23a:	85 bb       	out	0x15, r24	; 21
		LCD_Port |= (1<<EN);
 23c:	85 b3       	in	r24, 0x15	; 21
 23e:	81 60       	ori	r24, 0x01	; 1
 240:	85 bb       	out	0x15, r24	; 21
 242:	00 00       	nop
		_delay_us(1);
		LCD_Port &= ~ (1<<EN);
 244:	85 b3       	in	r24, 0x15	; 21
 246:	8e 7f       	andi	r24, 0xFE	; 254
 248:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 24a:	83 ef       	ldi	r24, 0xF3	; 243
 24c:	91 e0       	ldi	r25, 0x01	; 1
 24e:	01 97       	sbiw	r24, 0x01	; 1
 250:	f1 f7       	brne	.-4      	; 0x24e <LCD_Char+0x4c>
 252:	00 c0       	rjmp	.+0      	; 0x254 <LCD_Char+0x52>
 254:	00 00       	nop
 256:	08 95       	ret

00000258 <LCD_Init>:
		_delay_ms(2);
	}

	void LCD_Init (volatile uint8_t *port)			/* LCD Initialize function */
	{
		*port = 0xFF;			/* Make LCD port direction as o/p */
 258:	2f ef       	ldi	r18, 0xFF	; 255
 25a:	fc 01       	movw	r30, r24
 25c:	20 83       	st	Z, r18
 25e:	87 e8       	ldi	r24, 0x87	; 135
 260:	93 e1       	ldi	r25, 0x13	; 19
 262:	01 97       	sbiw	r24, 0x01	; 1
 264:	f1 f7       	brne	.-4      	; 0x262 <LCD_Init+0xa>
 266:	00 c0       	rjmp	.+0      	; 0x268 <LCD_Init+0x10>
 268:	00 00       	nop
		_delay_ms(20);			/* LCD Power ON delay always >15ms */
		
		LCD_Command(0x02);		/* send for 4 bit initialization of LCD  */
 26a:	82 e0       	ldi	r24, 0x02	; 2
 26c:	0e 94 d6 00 	call	0x1ac	; 0x1ac <LCD_Command>
		LCD_Command(0x28);              /* 2 line, 5*7 matrix in 4-bit mode */
 270:	88 e2       	ldi	r24, 0x28	; 40
 272:	0e 94 d6 00 	call	0x1ac	; 0x1ac <LCD_Command>
		LCD_Command(0x0c);              /* Display on cursor off*/
 276:	8c e0       	ldi	r24, 0x0C	; 12
 278:	0e 94 d6 00 	call	0x1ac	; 0x1ac <LCD_Command>
		LCD_Command(0x06);              /* Increment cursor (shift cursor to right)*/
 27c:	86 e0       	ldi	r24, 0x06	; 6
 27e:	0e 94 d6 00 	call	0x1ac	; 0x1ac <LCD_Command>
		LCD_Command(0x01);              /* Clear display screen*/
 282:	81 e0       	ldi	r24, 0x01	; 1
 284:	0e 94 d6 00 	call	0x1ac	; 0x1ac <LCD_Command>
 288:	e3 ef       	ldi	r30, 0xF3	; 243
 28a:	f1 e0       	ldi	r31, 0x01	; 1
 28c:	31 97       	sbiw	r30, 0x01	; 1
 28e:	f1 f7       	brne	.-4      	; 0x28c <LCD_Init+0x34>
 290:	00 c0       	rjmp	.+0      	; 0x292 <LCD_Init+0x3a>
 292:	00 00       	nop
 294:	08 95       	ret

00000296 <LCD_String>:
		_delay_ms(2);
	}


	void LCD_String (char *str)		/* Send string to LCD function */
	{
 296:	0f 93       	push	r16
 298:	1f 93       	push	r17
 29a:	cf 93       	push	r28
 29c:	df 93       	push	r29
 29e:	8c 01       	movw	r16, r24
		int i;
		for(i=0;str[i]!=0;i++)		/* Send each char of string till the NULL */
 2a0:	c0 e0       	ldi	r28, 0x00	; 0
 2a2:	d0 e0       	ldi	r29, 0x00	; 0
 2a4:	03 c0       	rjmp	.+6      	; 0x2ac <LCD_String+0x16>
		{
			LCD_Char (str[i]);
 2a6:	0e 94 01 01 	call	0x202	; 0x202 <LCD_Char>


	void LCD_String (char *str)		/* Send string to LCD function */
	{
		int i;
		for(i=0;str[i]!=0;i++)		/* Send each char of string till the NULL */
 2aa:	21 96       	adiw	r28, 0x01	; 1
 2ac:	f8 01       	movw	r30, r16
 2ae:	ec 0f       	add	r30, r28
 2b0:	fd 1f       	adc	r31, r29
 2b2:	80 81       	ld	r24, Z
 2b4:	81 11       	cpse	r24, r1
 2b6:	f7 cf       	rjmp	.-18     	; 0x2a6 <LCD_String+0x10>
		{
			LCD_Char (str[i]);
		}
	}
 2b8:	df 91       	pop	r29
 2ba:	cf 91       	pop	r28
 2bc:	1f 91       	pop	r17
 2be:	0f 91       	pop	r16
 2c0:	08 95       	ret

000002c2 <LCD_String_xy>:

	void LCD_String_xy (char row, char pos, char *str)	/* Send string to LCD with xy position */
	{
 2c2:	cf 93       	push	r28
 2c4:	df 93       	push	r29
 2c6:	ea 01       	movw	r28, r20
		if (row == 0 && pos<16)
 2c8:	81 11       	cpse	r24, r1
 2ca:	08 c0       	rjmp	.+16     	; 0x2dc <LCD_String_xy+0x1a>
 2cc:	60 31       	cpi	r22, 0x10	; 16
 2ce:	30 f4       	brcc	.+12     	; 0x2dc <LCD_String_xy+0x1a>
		LCD_Command((pos & 0x0F)|0x80);	/* Command of first row and required position<16 */
 2d0:	86 2f       	mov	r24, r22
 2d2:	8f 70       	andi	r24, 0x0F	; 15
 2d4:	80 68       	ori	r24, 0x80	; 128
 2d6:	0e 94 d6 00 	call	0x1ac	; 0x1ac <LCD_Command>
 2da:	09 c0       	rjmp	.+18     	; 0x2ee <LCD_String_xy+0x2c>
		else if (row == 1 && pos<16)
 2dc:	81 30       	cpi	r24, 0x01	; 1
 2de:	39 f4       	brne	.+14     	; 0x2ee <LCD_String_xy+0x2c>
 2e0:	60 31       	cpi	r22, 0x10	; 16
 2e2:	28 f4       	brcc	.+10     	; 0x2ee <LCD_String_xy+0x2c>
		LCD_Command((pos & 0x0F)|0xC0);	/* Command of first row and required position<16 */
 2e4:	86 2f       	mov	r24, r22
 2e6:	8f 70       	andi	r24, 0x0F	; 15
 2e8:	80 6c       	ori	r24, 0xC0	; 192
 2ea:	0e 94 d6 00 	call	0x1ac	; 0x1ac <LCD_Command>
		LCD_String(str);		/* Call LCD string function */
 2ee:	ce 01       	movw	r24, r28
 2f0:	0e 94 4b 01 	call	0x296	; 0x296 <LCD_String>
	}
 2f4:	df 91       	pop	r29
 2f6:	cf 91       	pop	r28
 2f8:	08 95       	ret

000002fa <LCD_Clear>:

	void LCD_Clear()
	{
		LCD_Command (0x01);		/* Clear display */
 2fa:	81 e0       	ldi	r24, 0x01	; 1
 2fc:	0e 94 d6 00 	call	0x1ac	; 0x1ac <LCD_Command>
 300:	83 ef       	ldi	r24, 0xF3	; 243
 302:	91 e0       	ldi	r25, 0x01	; 1
 304:	01 97       	sbiw	r24, 0x01	; 1
 306:	f1 f7       	brne	.-4      	; 0x304 <LCD_Clear+0xa>
 308:	00 c0       	rjmp	.+0      	; 0x30a <LCD_Clear+0x10>
 30a:	00 00       	nop
		_delay_ms(2);
		LCD_Command (0xC0);		/* Cursor at home position */
 30c:	80 ec       	ldi	r24, 0xC0	; 192
 30e:	0e 94 d6 00 	call	0x1ac	; 0x1ac <LCD_Command>
 312:	08 95       	ret

00000314 <ustawKursor>:
	}

	void ustawKursor(unsigned char x, unsigned char y )
	{
		LCD_Port &=~(1<<RS);
 314:	95 b3       	in	r25, 0x15	; 21
 316:	9d 7f       	andi	r25, 0xFD	; 253
 318:	95 bb       	out	0x15, r25	; 21
		LCD_Command((x*0x40+y) | 0x80);
 31a:	90 e4       	ldi	r25, 0x40	; 64
 31c:	89 9f       	mul	r24, r25
 31e:	60 0d       	add	r22, r0
 320:	11 24       	eor	r1, r1
 322:	86 2f       	mov	r24, r22
 324:	80 68       	ori	r24, 0x80	; 128
 326:	0e 94 d6 00 	call	0x1ac	; 0x1ac <LCD_Command>
		LCD_Port |= (1<<RS);
 32a:	85 b3       	in	r24, 0x15	; 21
 32c:	82 60       	ori	r24, 0x02	; 2
 32e:	85 bb       	out	0x15, r24	; 21
 330:	81 ee       	ldi	r24, 0xE1	; 225
 332:	94 e0       	ldi	r25, 0x04	; 4
 334:	01 97       	sbiw	r24, 0x01	; 1
 336:	f1 f7       	brne	.-4      	; 0x334 <ustawKursor+0x20>
 338:	00 c0       	rjmp	.+0      	; 0x33a <ustawKursor+0x26>
 33a:	00 00       	nop
 33c:	08 95       	ret

0000033e <czysc_y>:
		_delay_ms(5);
	}
	void czysc_y(int8_t x, int8_t y)
	{
 33e:	cf 93       	push	r28
 340:	df 93       	push	r29
 342:	d8 2f       	mov	r29, r24
 344:	c6 2f       	mov	r28, r22
		while(y<16)
 346:	0e c0       	rjmp	.+28     	; 0x364 <czysc_y+0x26>
		{
			ustawKursor(x,y);
 348:	6c 2f       	mov	r22, r28
 34a:	8d 2f       	mov	r24, r29
 34c:	0e 94 8a 01 	call	0x314	; 0x314 <ustawKursor>
			LCD_Char(' ');
 350:	80 e2       	ldi	r24, 0x20	; 32
 352:	0e 94 01 01 	call	0x202	; 0x202 <LCD_Char>
			y++;
 356:	cf 5f       	subi	r28, 0xFF	; 255
 358:	83 ed       	ldi	r24, 0xD3	; 211
 35a:	90 e3       	ldi	r25, 0x30	; 48
 35c:	01 97       	sbiw	r24, 0x01	; 1
 35e:	f1 f7       	brne	.-4      	; 0x35c <czysc_y+0x1e>
 360:	00 c0       	rjmp	.+0      	; 0x362 <czysc_y+0x24>
 362:	00 00       	nop
		LCD_Port |= (1<<RS);
		_delay_ms(5);
	}
	void czysc_y(int8_t x, int8_t y)
	{
		while(y<16)
 364:	c0 31       	cpi	r28, 0x10	; 16
 366:	84 f3       	brlt	.-32     	; 0x348 <czysc_y+0xa>
			ustawKursor(x,y);
			LCD_Char(' ');
			y++;
			_delay_ms(50);
		}
		ustawKursor(x,y);
 368:	6c 2f       	mov	r22, r28
 36a:	8d 2f       	mov	r24, r29
 36c:	0e 94 8a 01 	call	0x314	; 0x314 <ustawKursor>
 370:	df 91       	pop	r29
 372:	cf 91       	pop	r28
 374:	08 95       	ret

00000376 <main>:
#include "LCD.h"

	int main()
	{
		DDRC = 0xFF;
 376:	8f ef       	ldi	r24, 0xFF	; 255
 378:	84 bb       	out	0x14, r24	; 20
		LCD_Init(&PORTC);			/* Initialization of LCD*/
 37a:	85 e3       	ldi	r24, 0x35	; 53
 37c:	90 e0       	ldi	r25, 0x00	; 0
 37e:	0e 94 2c 01 	call	0x258	; 0x258 <LCD_Init>
		DDRA = 0xF0;
 382:	80 ef       	ldi	r24, 0xF0	; 240
 384:	8a bb       	out	0x1a, r24	; 26
		initKeyboard(&PORTA);		/* Initialization of keypad*/
 386:	8b e3       	ldi	r24, 0x3B	; 59
 388:	90 e0       	ldi	r25, 0x00	; 0
 38a:	0e 94 49 00 	call	0x92	; 0x92 <initKeyboard>
		
		LCD_String("Systemy");
 38e:	80 e7       	ldi	r24, 0x70	; 112
 390:	90 e0       	ldi	r25, 0x00	; 0
 392:	0e 94 4b 01 	call	0x296	; 0x296 <LCD_String>
		//LCD_Command(0xC0);
		ustawKursor(1,0);
 396:	60 e0       	ldi	r22, 0x00	; 0
 398:	81 e0       	ldi	r24, 0x01	; 1
 39a:	0e 94 8a 01 	call	0x314	; 0x314 <ustawKursor>
		LCD_String("Wbudowane");
 39e:	88 e7       	ldi	r24, 0x78	; 120
 3a0:	90 e0       	ldi	r25, 0x00	; 0
 3a2:	0e 94 4b 01 	call	0x296	; 0x296 <LCD_String>
 3a6:	2f e3       	ldi	r18, 0x3F	; 63
 3a8:	8d e0       	ldi	r24, 0x0D	; 13
 3aa:	93 e0       	ldi	r25, 0x03	; 3
 3ac:	21 50       	subi	r18, 0x01	; 1
 3ae:	80 40       	sbci	r24, 0x00	; 0
 3b0:	90 40       	sbci	r25, 0x00	; 0
 3b2:	e1 f7       	brne	.-8      	; 0x3ac <main+0x36>
 3b4:	00 c0       	rjmp	.+0      	; 0x3b6 <main+0x40>
 3b6:	00 00       	nop
		_delay_ms(1000);
		LCD_Clear();
 3b8:	0e 94 7d 01 	call	0x2fa	; 0x2fa <LCD_Clear>
		LCD_String_xy(0,0,"Klawisz: (klawa)");
 3bc:	42 e8       	ldi	r20, 0x82	; 130
 3be:	50 e0       	ldi	r21, 0x00	; 0
 3c0:	60 e0       	ldi	r22, 0x00	; 0
 3c2:	80 e0       	ldi	r24, 0x00	; 0
 3c4:	0e 94 61 01 	call	0x2c2	; 0x2c2 <LCD_String_xy>
 3c8:	2f e3       	ldi	r18, 0x3F	; 63
 3ca:	8d e0       	ldi	r24, 0x0D	; 13
 3cc:	93 e0       	ldi	r25, 0x03	; 3
 3ce:	21 50       	subi	r18, 0x01	; 1
 3d0:	80 40       	sbci	r24, 0x00	; 0
 3d2:	90 40       	sbci	r25, 0x00	; 0
 3d4:	e1 f7       	brne	.-8      	; 0x3ce <main+0x58>
 3d6:	00 c0       	rjmp	.+0      	; 0x3d8 <main+0x62>
 3d8:	00 00       	nop
		_delay_ms(1000);
		czysc_y(0,9);
 3da:	69 e0       	ldi	r22, 0x09	; 9
 3dc:	80 e0       	ldi	r24, 0x00	; 0
 3de:	0e 94 9f 01 	call	0x33e	; 0x33e <czysc_y>
		while(1){
			//LCD_Command(0xC0);
			//LCD_Char(keyfind());
			
			ustawKursor(0,9);
 3e2:	69 e0       	ldi	r22, 0x09	; 9
 3e4:	80 e0       	ldi	r24, 0x00	; 0
 3e6:	0e 94 8a 01 	call	0x314	; 0x314 <ustawKursor>
			LCD_Char(keyfind());
 3ea:	0e 94 4d 00 	call	0x9a	; 0x9a <keyfind>
 3ee:	0e 94 01 01 	call	0x202	; 0x202 <LCD_Char>
 3f2:	f7 cf       	rjmp	.-18     	; 0x3e2 <main+0x6c>

000003f4 <_exit>:
 3f4:	f8 94       	cli

000003f6 <__stop_program>:
 3f6:	ff cf       	rjmp	.-2      	; 0x3f6 <__stop_program>
